//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 15.0.27703.1
// 
namespace Mobile.ServiceSMDT {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://argo.navis.com/webservice/external", ConfigurationName="ServiceSMDT.n4ServiceSoap")]
    public interface n4ServiceSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://argo.navis.com/webservice/external/basicInvoke", ReplyAction="*")]
        System.Threading.Tasks.Task<Mobile.ServiceSMDT.basicInvokeResponse> basicInvokeAsync(Mobile.ServiceSMDT.basicInvokeRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class basicInvokeRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="basicInvoke", Namespace="http://argo.navis.com/webservice/external", Order=0)]
        public Mobile.ServiceSMDT.basicInvokeRequestBody Body;
        
        public basicInvokeRequest() {
        }
        
        public basicInvokeRequest(Mobile.ServiceSMDT.basicInvokeRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://argo.navis.com/webservice/external")]
    public partial class basicInvokeRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string scopeCoordinateIds;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public string xmlDoc;
        
        public basicInvokeRequestBody() {
        }
        
        public basicInvokeRequestBody(string scopeCoordinateIds, string xmlDoc) {
            this.scopeCoordinateIds = scopeCoordinateIds;
            this.xmlDoc = xmlDoc;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class basicInvokeResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="basicInvokeResponse", Namespace="http://argo.navis.com/webservice/external", Order=0)]
        public Mobile.ServiceSMDT.basicInvokeResponseBody Body;
        
        public basicInvokeResponse() {
        }
        
        public basicInvokeResponse(Mobile.ServiceSMDT.basicInvokeResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://argo.navis.com/webservice/external")]
    public partial class basicInvokeResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string basicInvokeResult;
        
        public basicInvokeResponseBody() {
        }
        
        public basicInvokeResponseBody(string basicInvokeResult) {
            this.basicInvokeResult = basicInvokeResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface n4ServiceSoapChannel : Mobile.ServiceSMDT.n4ServiceSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class n4ServiceSoapClient : System.ServiceModel.ClientBase<Mobile.ServiceSMDT.n4ServiceSoap>, Mobile.ServiceSMDT.n4ServiceSoap {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public n4ServiceSoapClient() : 
                base(n4ServiceSoapClient.GetDefaultBinding(), n4ServiceSoapClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.n4ServiceSoap.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public n4ServiceSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(n4ServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), n4ServiceSoapClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public n4ServiceSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(n4ServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public n4ServiceSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(n4ServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public n4ServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Mobile.ServiceSMDT.basicInvokeResponse> Mobile.ServiceSMDT.n4ServiceSoap.basicInvokeAsync(Mobile.ServiceSMDT.basicInvokeRequest request) {
            return base.Channel.basicInvokeAsync(request);
        }
        
        public System.Threading.Tasks.Task<Mobile.ServiceSMDT.basicInvokeResponse> basicInvokeAsync(string scopeCoordinateIds, string xmlDoc) {
            Mobile.ServiceSMDT.basicInvokeRequest inValue = new Mobile.ServiceSMDT.basicInvokeRequest();
            inValue.Body = new Mobile.ServiceSMDT.basicInvokeRequestBody();
            inValue.Body.scopeCoordinateIds = scopeCoordinateIds;
            inValue.Body.xmlDoc = xmlDoc;
            return ((Mobile.ServiceSMDT.n4ServiceSoap)(this)).basicInvokeAsync(inValue);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.n4ServiceSoap)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.n4ServiceSoap)) {
                return new System.ServiceModel.EndpointAddress("http://cgint04:50502/Ws_HH/n4Service.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return n4ServiceSoapClient.GetBindingForEndpoint(EndpointConfiguration.n4ServiceSoap);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return n4ServiceSoapClient.GetEndpointAddress(EndpointConfiguration.n4ServiceSoap);
        }
        
        public enum EndpointConfiguration {
            
            n4ServiceSoap,
        }
    }
}
