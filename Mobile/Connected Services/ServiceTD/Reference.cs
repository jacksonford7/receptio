//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 15.0.27703.1
// 
namespace Mobile.ServiceTD {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceTD.IServicioAnuncianteProblema")]
    public interface IServicioAnuncianteProblema {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioAnuncianteProblema/AnunciarProblema", ReplyAction="http://tempuri.org/IServicioAnuncianteProblema/AnunciarProblemaResponse")]
        System.Threading.Tasks.Task AnunciarProblemaAsync(int idTransaccionQuiosco);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioAnuncianteProblema/AnunciarProblemaMobile", ReplyAction="http://tempuri.org/IServicioAnuncianteProblema/AnunciarProblemaMobileResponse")]
        System.Threading.Tasks.Task AnunciarProblemaMobileAsync(long idTosProcess, short idZona);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioAnuncianteProblema/AnunciarProblemaGenericoMobile", ReplyAction="http://tempuri.org/IServicioAnuncianteProblema/AnunciarProblemaGenericoMobileResp" +
            "onse")]
        System.Threading.Tasks.Task AnunciarProblemaGenericoMobileAsync(string mensajeError, short idZona);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioAnuncianteProblema/AnunciarProblemaTransaccionPendien" +
            "te", ReplyAction="http://tempuri.org/IServicioAnuncianteProblema/AnunciarProblemaTransaccionPendien" +
            "teResponse")]
        System.Threading.Tasks.Task AnunciarProblemaTransaccionPendienteAsync(long idPreGate, short idZona);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioAnuncianteProblema/AnunciarProblemaClienteAppTransact" +
            "ion", ReplyAction="http://tempuri.org/IServicioAnuncianteProblema/AnunciarProblemaClienteAppTransact" +
            "ionResponse")]
        System.Threading.Tasks.Task AnunciarProblemaClienteAppTransactionAsync(int idError, short idZona);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioAnuncianteProblema/AnunciarProblemaServicioWebTransac" +
            "tion", ReplyAction="http://tempuri.org/IServicioAnuncianteProblema/AnunciarProblemaServicioWebTransac" +
            "tionResponse")]
        System.Threading.Tasks.Task AnunciarProblemaServicioWebTransactionAsync(string error, short idZona, int idAplicacion);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServicioAnuncianteProblemaChannel : Mobile.ServiceTD.IServicioAnuncianteProblema, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServicioAnuncianteProblemaClient : System.ServiceModel.ClientBase<Mobile.ServiceTD.IServicioAnuncianteProblema>, Mobile.ServiceTD.IServicioAnuncianteProblema {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ServicioAnuncianteProblemaClient() : 
                base(ServicioAnuncianteProblemaClient.GetDefaultBinding(), ServicioAnuncianteProblemaClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IServicioAnuncianteProblema.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServicioAnuncianteProblemaClient(EndpointConfiguration endpointConfiguration) : 
                base(ServicioAnuncianteProblemaClient.GetBindingForEndpoint(endpointConfiguration), ServicioAnuncianteProblemaClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServicioAnuncianteProblemaClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ServicioAnuncianteProblemaClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServicioAnuncianteProblemaClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ServicioAnuncianteProblemaClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServicioAnuncianteProblemaClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task AnunciarProblemaAsync(int idTransaccionQuiosco) {
            return base.Channel.AnunciarProblemaAsync(idTransaccionQuiosco);
        }
        
        public System.Threading.Tasks.Task AnunciarProblemaMobileAsync(long idTosProcess, short idZona) {
            return base.Channel.AnunciarProblemaMobileAsync(idTosProcess, idZona);
        }
        
        public System.Threading.Tasks.Task AnunciarProblemaGenericoMobileAsync(string mensajeError, short idZona) {
            return base.Channel.AnunciarProblemaGenericoMobileAsync(mensajeError, idZona);
        }
        
        public System.Threading.Tasks.Task AnunciarProblemaTransaccionPendienteAsync(long idPreGate, short idZona) {
            return base.Channel.AnunciarProblemaTransaccionPendienteAsync(idPreGate, idZona);
        }
        
        public System.Threading.Tasks.Task AnunciarProblemaClienteAppTransactionAsync(int idError, short idZona) {
            return base.Channel.AnunciarProblemaClienteAppTransactionAsync(idError, idZona);
        }
        
        public System.Threading.Tasks.Task AnunciarProblemaServicioWebTransactionAsync(string error, short idZona, int idAplicacion) {
            return base.Channel.AnunciarProblemaServicioWebTransactionAsync(error, idZona, idAplicacion);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IServicioAnuncianteProblema)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IServicioAnuncianteProblema)) {
                return new System.ServiceModel.EndpointAddress("http://cgint04:50502/WS_RECEPTIOAnuncianteProblema/ServicioAnuncianteProblema.svc" +
                        "");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return ServicioAnuncianteProblemaClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IServicioAnuncianteProblema);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return ServicioAnuncianteProblemaClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IServicioAnuncianteProblema);
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_IServicioAnuncianteProblema,
        }
    }
}
